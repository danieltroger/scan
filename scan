#!/usr/bin/env php -d memory_limit=500M
<?php
define("fpdf",getenv("HOME") . DIRECTORY_SEPARATOR . ".fpdf");
if(!file_exists(fpdf))
{
  file_put_contents(fpdf,"<?php " . post("https://gist.githubusercontent.com/danieltroger/b89ecca95f2e058e6120/raw/89f95fbfb0a7721ad257d006073d7a8b01c10ff5/gistfile1.txt",NULL,false));
}
require(fpdf);
if(strlen($argv[1]) < 1) die("No filename specified.\n");
if($argv[1] == "-h" || $argv[1] == "--help") die("Usage: {$argv[0]} <filename> [<Jpeg/Pdf> <DPI> <contrast> <brightness> <Gray/Color> <compression>]\n");
 //<filname ><DPI> <contrast> <brightness>
 if(strlen($argv[2]) > 1)
 {
   if(strtolower($argv[2]) == "pdf") define("pdf",true);
   else define("pdf",false);
 }
 else { define("pdf",false); }
if(strlen($argv[3]) > 1)
{
  define("DPI",$argv[3]);
}
else
{
  define("DPI",300);
}
if(strlen($argv[4]) > 1)
{
  define("contrast",$argv[4]);
}
else
{
  define("contrast",1000);
}
if(strlen($argv[5]) > 1)
{
  define("brightness",$argv[5]);
}
else
{
  define("brightness",1000);
}
if(strlen($argv[6]) > 1)
{
  define("color",$argv[6]);
}
else
{
  define("color","Color");
}
if(strlen($argv[7]) > 1)
{
  define("compression",$argv[7]);
}
else
{
  define("compression",100);
}
define("opts","<scan:ScanJob xmlns:scan=\"http://www.hp.com/schemas/imaging/con/cnx/scan/2008/08/19\" xmlns:dd=\"http://www.hp.com/schemas/imaging/con/dictionaries/1.0/\">
<scan:XResolution>" . DPI ."</scan:XResolution>
<scan:YResolution>" . DPI ."</scan:YResolution>
<scan:XStart>0</scan:XStart>
<scan:YStart>0</scan:YStart>
<scan:Width>2480</scan:Width>
<scan:Height>3508</scan:Height>
<scan:Format>Jpeg</scan:Format>
<scan:CompressionQFactor>" . compression . "</scan:CompressionQFactor>
<scan:ColorSpace>" . color . "</scan:ColorSpace>
<scan:BitDepth>8</scan:BitDepth>
<scan:InputSource>Platen</scan:InputSource>
<scan:GrayRendering>NTSC</scan:GrayRendering>
<scan:ToneMap>
<scan:Gamma>1000</scan:Gamma>
<scan:Brightness>" . brightness . "</scan:Brightness>
<scan:Contrast>" . contrast . "</scan:Contrast>
<scan:Highlite>179</scan:Highlite>
<scan:Shadow>25</scan:Shadow>
</scan:ToneMap>
<scan:ContentType>Photo</scan:ContentType>
</scan:ScanJob>");
define("ip","http://192.168.178.22");
if(pdf)
{
  $pdfo = new FPDF();
  $done = false;
  $pdfo->AliasNbPages();
  while(!$done)
  {
    $f = ".tmpfile" . rand() . ".jpg";
    file_put_contents($f,scan());
    echo "Scan done, adding to pdf...\n";
    pdf_img($pdfo,$f);
    unlink($f);
    echo "Done. Press enter to scan another page, type d or done to finish. ";
    $a = stdin();
    if($a == "d" || $a == "done") $done = true;
  }
  $pdfo->Output($argv[1],"F");
}
else
{
  file_put_contents($argv[1],scan());
  echo "Done.\n";
}
function scan()
{
 if(busy()) die("Scanner busy\n");
 $resp = post(ip . "/Scan/Jobs",opts,true,true,false);
 $lines = explode("\n",$resp);
 foreach($lines as $line)
 {
   $splt = explode(":",$line);
   if($splt[0] == "Location")
   {
     unset($splt[0]);
     $joburl = substr(implode(":",$splt),1);
   }
 }
 echo "Started job, URL: {$joburl}\n";
 return dlj($joburl);
}
function stdin()
{
  $handle = fopen ("php://stdin","r");
  $text = strtolower(str_replace("\n","",fgets($handle)));
  fclose($handle);
  return $text;
}
function dlj($joburl)
{
  $status = "";
  while($status != "ReadyToUpload")
  {
   $jr = simplexml_load_string(post($joburl,NULL,false));
   $dlurl = $jr->ScanJob->PreScanPage->BinaryURL;
   $status = $jr->ScanJob->PreScanPage->PageState;
   echo "Status: {$status}\n";
 }
  echo "Ready, scanning...\n";
  return post(ip . $dlurl,NULL,false);
}
function busy()
{
  $s = simplexml_load_string(post(ip . "/Scan/Status",NULL,false));
  if($s->ScannerState == "Idle") return false;
  return true;
}
function post($url,$data,$post = true,$head = false,$redir = true)
  {
    $ch = curl_init( $url );
    curl_setopt( $ch, CURLOPT_FOLLOWLOCATION, $redir );
    curl_setopt( $ch, CURLOPT_HEADER, $head );
    curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );
    if($post)
    {
      curl_setopt($ch,CURLOPT_POST, true);
      curl_setopt($ch,CURLOPT_POSTFIELDS, $data);
    }
    curl_setopt( $ch, CURLOPT_BINARYTRANSFER, true);
    curl_setopt($ch,CURLOPT_TIMEOUT,60*60*24);
    curl_setopt( $ch, CURLOPT_USERAGENT, "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0");
    $restext = curl_exec( $ch );
    curl_close( $ch );
    return $restext;
  }
  function pdf_img($pdf,$fn)
{
list($width,$height) = getimagesize($fn);
if($width > $pdf -> h || $height > $pdf -> w)
{
if($width > $height) $pdf->AddPage('L'); $scale = $width/$pdf -> w;
if($height > $width) $pdf->AddPage(); $scale = $height/$pdf -> h;
$pdf->Image($fn,0,0,$width/$scale,$height/$scale);
}
else
{
$pdf->Image($fn,0,0);
}
}
