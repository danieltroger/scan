#!/usr/bin/php -d memory_limit=10G
<?php
define("fpdf",getenv("HOME") . DIRECTORY_SEPARATOR . ".fpdf");
if(!file_exists(fpdf))
{
  file_put_contents(fpdf,"<?php " . post("http://files.sn0wbreak.com/mirror.php?url=https://gist.githubusercontent.com/danieltroger/b89ecca95f2e058e6120/raw/89f95fbfb0a7721ad257d006073d7a8b01c10ff5/gistfile1.txt",NULL,false));
}
require(fpdf);
$arguments = args(true);
define("usage","Usage: {$argv[0]} <filename>

Possible options:
--start:x (int) Default: 0
--start:y (int) Default: 0
--DPI (int) Default: 300
--grey (bool) Default: false
--compression (int) Default: 100 [smallest file]
--brightness (int) Default: 1000
--contrast (int) Default: 1000
--type (pdf/jpg) Default: Jpg
--width (int) Default: 2480
--height (int) Default: 3508
--rotate (int degress) Default: 0 [requires GD or jpegtran]
--scanner (url) [HTTP URL to scanner, i.e. http://172.20.10.6]

---------------------

Written by Daniel Troger.
");
if(@$argv[1] == "-h" || @$argv[1] == "--help") die(usage);
$startx = @$arguments['start:x'];
$starty = @$arguments['start:y'];
$color = @$arguments['grey'] == "true" ? "Gray" : "Color";
if(empty($startx) || empty($starty)) $startx = 0; $starty = 0;
define("opts","<scan:ScanJob xmlns:scan=\"http://www.hp.com/schemas/imaging/con/cnx/scan/2008/08/19\" xmlns:dd=\"http://www.hp.com/schemas/imaging/con/dictionaries/1.0/\">
<scan:XResolution>" . arg('dpi',300) ."</scan:XResolution>
<scan:YResolution>" . arg('dpi',300) ."</scan:YResolution>
<scan:XStart>" . $startx . "</scan:XStart>
<scan:YStart>" . $starty . "</scan:YStart>
<scan:Width>" . arg('width',2480) . "</scan:Width>
<scan:Height>" . arg('height',3508) . "</scan:Height>
<scan:Format>Jpeg</scan:Format>
<scan:CompressionQFactor>" . arg('compression',100) . "</scan:CompressionQFactor>
<scan:ColorSpace>" . $color . "</scan:ColorSpace>
<scan:BitDepth>8</scan:BitDepth>
<scan:InputSource>Platen</scan:InputSource>
<scan:GrayRendering>NTSC</scan:GrayRendering>
<scan:ToneMap>
<scan:Gamma>1000</scan:Gamma>
<scan:Brightness>" . arg('brightness',1000) . "</scan:Brightness>
<scan:Contrast>" . arg('contrast',1000) . "</scan:Contrast>
<scan:Highlite>179</scan:Highlite>
<scan:Shadow>25</scan:Shadow>
</scan:ToneMap>
<scan:ContentType>Photo</scan:ContentType>
</scan:ScanJob>");
define("ip",arg('scanner',"http://172.20.10.6"));
$f = @$arguments[0];
if(empty($f)) die("No filename specified. " . PHP_EOL . PHP_EOL . usage);
if(@$arguments['type'] == "pdf" || ext($f) == "pdf")
{
  $pdfo = new FPDF();
  $done = false;
  $pdfo->AliasNbPages();
  while(!$done)
  {
    $tmp = ".tmp_" . rand() . ".jpg";
    scan($tmp);
    echo "Scan done, adding to pdf..." . PHP_EOL;
    pdf_img($pdfo,$tmp);
    unlink($tmp);
    if(file_exists($tmp)) echo "WUUT?\n";
    echo "Done. Press enter to scan another page, type d or done to finish. ";
    $a = stdin();
    if($a == "d" || $a == "done") $done = true;
  }
  $pdfo->Output($f,"F");
}
else
{
  scan($f);
  echo "Done.\n";
}
function scan($outfile)
{
  $t = 0;
  while(busy())
  {
    echo "Waiting for scanner... {$t}\r";
    sleep(1);
    $t++;
  }
  if($t != 0) echo PHP_EOL;
  $resp = post(ip . "/Scan/Jobs",opts,true,true,false);
  $lines = explode("\n",$resp);
  foreach($lines as $line)
  {
    $splt = explode(":",$line);
    if($splt[0] == "Location")
    {
      unset($splt[0]);
      $joburl = substr(implode(":",$splt),1);
    }
  }
  echo "Started job, URL: {$joburl}\n";
  dlj($joburl,$outfile);
  $deg = (int) @$GLOBALS['arguments']['rotate'];
  if(!empty($deg))
  {
    if($deg > 270) echo "Rotate expects value between 0 and 270, not rotating." . PHP_EOL;
    if(strlen(shell_exec("which jpegtran")) > 2 && ($deg == 270 || $deg == 180 || $deg == 90))
    {
      $tmp = tempnam(".", ".tmp_");
      shell_exec("jpegtran -rot {$deg} {$outfile} > {$tmp}");
      if(!file_exists($tmp))
      {
        echo 'Something went wrong while executing jpegtran :()' . PHP_EOL;
      }
      else
      {
        unlink($outfile);
        rename($tmp,$outfile);
      }
    }
    elseif(function_exists('gd_info'))
    {
      $source = imagecreatefromjpeg($outfile);
      $rotate = imagerotate($source, $deg, 0);
      $tmp = tempnam(".", ".tmp_");
      imagejpeg($rotate,$tmp);
      unlink($outfile);
      rename($tmp,$outfile);
    }
    else
    {
      echo "Neither Jpegtran or the GD extension could be found. Cannot rotate image." . PHP_EOL;
    }
  }
}
function stdin()
{
  $handle = fopen ("php://stdin","r");
  $text = strtolower(str_replace("\n","",fgets($handle)));
  fclose($handle);
  return $text;
}
function dlj($joburl,$file)
{
  $status = "";
  while($status != "ReadyToUpload")
  {
    $jr = simplexml_load_string(post($joburl,NULL,false));
    $dlurl = $jr->ScanJob->PreScanPage->BinaryURL;
    $status = $jr->ScanJob->PreScanPage->PageState;
    echo "Status: {$status}\r";
    usleep(50000);
  }
  echo "\nReady, scanning...\n";
  post(ip . $dlurl,NULL,false,false,false,$file);
  if(!file_exists($file)) die("Something went wrong." . PHP_EOL);
}
function busy()
{
  $s = simplexml_load_string(post(ip . "/Scan/Status",NULL,false));
  if($s->ScannerState == "Idle") return false;
  return true;
}
function post($url,$data,$post = true,$head = false,$redir = true,$file = false)
{
  $ch = curl_init( $url );
  curl_setopt( $ch, CURLOPT_FOLLOWLOCATION, $redir );
  curl_setopt( $ch, CURLOPT_HEADER, $head );
  curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );
  if($post)
  {
    curl_setopt($ch,CURLOPT_POST, true);
    curl_setopt($ch,CURLOPT_POSTFIELDS, $data);
  }
  if($file != false)
  {
    $h = fopen($file,"w");
    curl_setopt($ch, CURLOPT_FILE, $h);
  }
  curl_setopt( $ch, CURLOPT_BINARYTRANSFER, true);
  curl_setopt($ch,CURLOPT_TIMEOUT,60*60*24);
  curl_setopt( $ch, CURLOPT_USERAGENT, "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:31.0) Gecko/20100101 Firefox/31.0");
  $restext = curl_exec( $ch );
  curl_close( $ch );
  if($file != false)
  {
    fclose($h);
    return;
  }
  return $restext;
}
function pdf_img($pdf,$fn)
{
  list($width,$height) = getimagesize($fn);
  if($width > $pdf -> h || $height > $pdf -> w)
  {
    if($width > $height) $pdf->AddPage('L'); $scale = $width/$pdf -> w;
    if($height > $width) $pdf->AddPage(); $scale = $height/$pdf -> h;
    $pdf->Image($fn,0,0,$width/$scale,$height/$scale);
  }
  else
  {
    $pdf->Image($fn,0,0);
  }
}
function args($lowercase = false)
{
  function rmdash($str)
  {
    if($str[0] == "-" && $str[1] != "-")
    {
      return substr($str,1);
    }
    elseif($str[0] == "-" && $str[1] == "-")
    {
      return substr($str,2);
    }
    else
    {
      return $str;
    }
  }
  $argc = $GLOBALS['argc'];
  $argv = $GLOBALS['argv'];
  $arga = Array();
  $i = 1;
  unset($argv[0]);
  if($argc > 1)
  {
    for(; $i < $argc; $i++)
    {
      $arg = $lowercase ? strtolower($argv[$i]) : $argv[$i];
      $nextarg = $lowercase ? @strtolower($argv[$i+1]) : $argv[$i+1];
      $try1 = explode("=",$arg);
      if(sizeof($try1) > 1)
      {
        $key = rmdash($try1[0]);
        unset($try1[0]);
        $arga[$key] = implode("=",$try1);
      }
      elseif($arg[0] == "-")
      {
        $arga[rmdash($arg)] = $nextarg;
        $i++;
      }
      else
      {
        $arga[] = $arg;
      }
    }
  }
  return $arga;
}
function arg($key,$default)
{
  $a = @$GLOBALS['arguments'][$key];
  return empty($a) ? $default : $a;
}
function ext($file,$split = false)
{
  $extension = explode(".",$file);
  $asize = sizeof($extension);
  $ext = strtolower($extension[$asize-1]);
  if(!$split)
  {
    return $ext;
  }
  else
  {
    unset($extension[$asize-1]);
    return array($ext,implode(".",$extension));
  }
}
?>
